---
layout: main
pageTitle: Stations
stylesheets:
- stations
---

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/>
<!-- Make sure you put this AFTER Leaflet's CSS -->
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
 integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
 crossorigin=""></script>
 <div id="map"></div>

<fieldset>
  <label for="ra">Show progress over time:</label>
<div style="display: flex; width: 100%; align-items: center;">
<input style="flex-grow: 1" type="range" min="0" max="{{ null | numberOfDaysSince("20201001") }}" name="r" id="ra" value="{{ null | numberOfDaysSince("20201001") }}">
<div style="min-width: 100px;
    text-align: right;
    flex-basis: 10%;" id="slider-date">Hello</div>
</div>
</fieldset>

<script>
  var mymap = L.map('map').setView([51.805, 0.29], 8);

  L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="/copyright">OpenStreetMap contributors</a>. Tiles style by <a href="https://www.hotosm.org/" target="_blank">Humanitarian OpenStreetMap Team</a> hosted by <a href="https://openstreetmap.fr/" target="_blank">OpenStreetMap France</a>',
    maxZoom: 22
  }).addTo(mymap);

var openrailwaymap = new L.TileLayer('http://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png',
{
	attribution: 'Railway layer: <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA 2.0</a> <a href="http://www.openrailwaymap.org/">OpenRailwayMap</a> and OpenStreetMap',
	minZoom: 2,
	maxZoom: 19,
	tileSize: 256
}).addTo(mymap);

//var myIcon = L.divIcon({className: 'visited'});
{% for station in visitedStations %}
var myIcon = L.divIcon({className: 'visited visited-{{ station.firstTrip.date | numberOfDaysSince("20201001") }}'});
L.marker([{{ station.lat }}, {{ station.long }}], { icon: myIcon }).bindPopup("<b>{{ station.name }}</b> ({{ station.code }})<br>First visit: ({{ station.firstTrip.date }})<br>Number of visits: {{ station.visitCount }}").addTo(mymap);
{% endfor %}
var myIcon2 = L.divIcon({className: 'unvisited'});
{% for station in unvisitedStations %}
L.marker([{{ station.lat }}, {{ station.long }}], { icon: myIcon2 }).bindPopup("<b>{{ station.name }}</b> ({{ station.code }})").addTo(mymap);
{% endfor %}

// Debounce it
// show date 

function updateIconsForDate(d) {
var el = document.getElementById("slider-date");
var date = new Date(2020, 9, 1);
date.setDate(date.getDate() + Number(d));
const yyyy = date.getFullYear();
let mm = date.getMonth() + 1;
let dd = date.getDate();
if (dd < 10) dd = '0' + dd;
if (mm < 10) mm = '0' + mm;
dString = dd + '/' + mm + '/' + yyyy;
el.innerText = dString;
{% for station in visitedStations %}
if (Number(d) >= {{ station.firstTrip.date | numberOfDaysSince("20201001") }}) {
  var els = document.getElementsByClassName("visited-{{ station.firstTrip.date | numberOfDaysSince("20201001") }}");
  for (el of els) {
    el.classList.remove("visited-post-date");
  }
} else {
var els = document.getElementsByClassName("visited-{{ station.firstTrip.date | numberOfDaysSince("20201001") }}");
  for (el of els) {
    el.classList.add("visited-post-date");
  }
}
{% endfor %}
}
var timeout;
document.getElementById("ra").addEventListener("input", function() {
clearTimeout(timeout);
let v = this.value;
timeout = setTimeout(function() { updateIconsForDate(v); }, 100)
});
updateIconsForDate(document.getElementById("ra").value);
    </script>
    
<table class="bordered">
  {% for county in countyStats %}
<tr><td>{{ county.name }}</td><td>{{ county.total }}</td><td>{{ county.visited }}</td><td>{{ county.percentage }}</td></tr>
{% endfor %}
  </table>